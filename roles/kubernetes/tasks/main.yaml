---

- name: check controllers count
  assert:
    that: (groups['controllers'] | length) >= 1

- name: check mandatory variables
  assert:
    that:
      - kubernetes_version is defined
      - kubernetes_packages is defined
      - kubernetes_calico_version is defined

- name: check mandatory variables ha
  assert:
    that:
      - k8s_ha.control_plane_ip is defined
      - k8s_ha.control_plane_port is defined
  when: (groups['controllers'] | length) > 1

- name: include install kubernetes
  include: install.yaml

- name: find kubernetes admin.conf
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubeadm_admin_conf

- name: try to find kubernetes main node
  set_fact:
    kubeadm_main_node: >-
      {{ hostvars | dict2items |
      selectattr("value.kubeadm_admin_conf.stat.exists") | 
      map(attribute="key") | first }}
  run_once: true
  ignore_errors: true

- name: init cluster if needed
  shell: >-
    kubeadm init
    --apiserver-advertise-address {{ ansible_default_ipv4.address }}
    {% if (groups['controllers'] | length) > 1 %}
    --control-plane-endpoint {{ k8s_ha.control_plane_ip }}:{{ k8s_ha.control_plane_port }}
    {% endif %}
    {{ kubernetes_kubeadm_init_args | default("") }}
  when: kubeadm_main_node is not defined
  run_once: yes

- name: find kubernetes admin.conf
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubeadm_admin_conf

- name: find kubernetes main node
  set_fact:
    kubeadm_main_node: >-
      {{ hostvars | dict2items |
      selectattr("value.kubeadm_admin_conf.stat.exists") | 
      map(attribute="key") | first }}
  run_once: true

- name: check cluster
  shell: >-
    KUBECONFIG=/etc/kubernetes/admin.conf
    kubectl -n kube-system get pods
  changed_when: false
  run_once: true
  delegate_to: "{{ kubeadm_main_node }}"

- name: check calico
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  shell: kubectl -n kube-system get deployment/calico-kube-controllers
  changed_when: false
  run_once: true
  delegate_to: "{{ kubeadm_main_node }}"
  register: kubernetes_calico_check
  ignore_errors: true
  check_mode: no

- name: install calico
  environment: |-
    {{ 
      proxy_env | default({}) |
      combine({"KUBECONFIG": "/etc/kubernetes/admin.conf"})
    }}
  shell: |
    kubectl apply -f https://docs.projectcalico.org/v{{ kubernetes_calico_version }}/manifests/calico.yaml
    kubectl -n kube-system set env daemonset/calico-node IP_AUTODETECTION_METHOD=can-reach={{ ansible_default_ipv4.address }}
  when: kubernetes_calico_check.rc == 1
  run_once: true
  delegate_to: "{{ kubeadm_main_node }}"

- name: get join command
  shell: kubeadm token create --print-join-command
  register: kubernetes_join_command
  run_once: true
  delegate_to: "{{ kubeadm_main_node }}"
  changed_when: false

- name: get ca cert key
  shell: kubeadm init phase upload-certs --upload-certs
  register: kubernetes_cert_key
  run_once: true
  delegate_to: "{{ kubeadm_main_node }}"
  changed_when: false

- name: join kubernetes cluster
  shell:
    cmd: >-
      {{ kubernetes_join_command.stdout_lines | last }}
      {%- if "controllers" in group_names %}
      --control-plane
      --apiserver-advertise-address {{ ansible_default_ipv4.address }}
      --certificate-key {{ kubernetes_cert_key.stdout_lines | last }}
      {%- endif %}
    creates: /etc/kubernetes/pki/ca.crt
